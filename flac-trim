#!/bin/bash

#################################################################################
#                   __ _                 _        _                             #
#                  / _| | __ _  ___     | |_ _ __(_)_ __ ___                    #
#                 | |_| |/ _` |/ __|____| __| '__| | '_ ` _ \                   #
#                 |  _| | (_| | (_|_____| |_| |  | | | | | | |                  #
#                 |_| |_|\__,_|\___|     \__|_|  |_|_| |_| |_|                  #
#                                                                               #
#                                                                               #
# MIT License                                                                   #
# Copyright (c) 2019 Massimo Pissarello                                         #
# Permission is hereby granted, free of charge, to any person obtaining a copy  #
# of this software and associated documentation files (the "Software"), to deal #
# in the Software without restriction, including without limitation the rights  #
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell     #
# copies of the Software, and to permit persons to whom the Software is         #
# furnished to do so, subject to the following conditions:                      #
# The above copyright notice and this permission notice shall be included in    #
# all copies or substantial portions of the Software.                           #
#                                                                               #
#################################################################################


# apt update && apt install bc ffmpeg file flac opus-tools -y

######################## CHANGE ########################
PATH1=/mnt/c/Users/mpiss/Desktop/flac ### CHANGE       #
PATH2=/mnt/d/Music/digital/flac ### CHANGE             #
########################################################
#                                                      #
MP3VBR=3 ### CHANGE                                    #
############ MP3 VBR Encoding ############             #
# Average kbit/s | Range kbit/s | OPTION #             #
#       225      |    190-250   |    1   #             #
#       190      |    170-210   |    2   #             #
#       175      |    150-195   |    3   #             #
#       165      |    140-185   |    4   #             #
#       130      |    120-150   |    5   #             #
#       115      |    100-130   |    6   #             #
#       100      |     80-120   |    7   #             #
#        85      |     70-105   |    8   #             #
#        65      |     45-85    |    9   #             #
##########################################             #
#                                                      #
ENCODEDBY="Massimo Bremi DJ" ### CHANGE                #
GENRE="" ### CHANGE                                    #
#                                                      #
########################################################


tput clear

FT=flac-trim
EXT=.flac
M3EXT=.mp3
M4EXT=.m4a
OPUSEXT=.opus
ID=tag
IMG=folder
PLF=00-flac_playlist.m3u
PL3=00-mp3_playlist.m3u
PL4=00-m4a_playlist.m3u
PLOP=00-opus_playlist.m3u
OR=1_original
TR=2_trimmed
CO=3_cover


ffmpeg_flac_norm() {
	echo "RMS Normalization to 0 dB..."
	ffmpeg -i "${FILE}" -af "volume=${DBLEVEL}dB","silenceremove=1:0:-72dB","adelay=250|250" \
		-metadata ENCODEDBY="$ENCODEDBY" -metadata GENRE="$GENRE" \
		-metadata:s:v comment="" -metadata:s:v comment="Cover (front)" \
		-sample_fmt s16 -ar 44100 $PATHSAVE/"${FILE}" -loglevel error
}

ffmpeg_flac() {
	ffmpeg -i "${FILE}" -af "silenceremove=1:0:-72dB","adelay=250|250" \
		-metadata ENCODEDBY="$ENCODEDBY" -metadata GENRE="$GENRE" \
		-metadata:s:v comment="" -metadata:s:v comment="Cover (front)" \
		-sample_fmt s16 -ar 44100 $PATHSAVE/"${FILE}" -loglevel error
}

ffmpeg_mp3() {
	ffmpeg -i "${FILE}" -af "volume=${DBLEVEL}dB","silenceremove=1:0:-72dB","adelay=250|250" \
		-metadata ENCODEDBY="$ENCODEDBY" -metadata GENRE="$GENRE" \
		-metadata:s:v comment="" -metadata:s:v comment="Cover (front)" \
		-c:a libmp3lame -q:a $MP3VBR -ar 44100 $PATHSAVE/"${FILE}"$M3EXT -loglevel error
}

ffmpeg_m4a() {
	ffmpeg -i "${FILE}" -af "volume=${DBLEVEL}dB","silenceremove=1:0:-72dB","adelay=250|250" \
		-metadata GENRE="$GENRE" \
		-c:v copy -c:a $LIB4 $M4AQ -ar 44100 $PATHSAVE/"${FILE}"$M4EXT -loglevel error
}

ffmpeg_opus() {
	ffmpeg -i "${FILE}" -af "volume=${DBLEVEL}dB","silenceremove=1:0:-72dB","adelay=250|250" \
		-metadata ENCODEDBY="$ENCODEDBY" -metadata GENRE="$GENRE" \
		-metadata:s:v comment="" -metadata:s:v comment="Cover (front)" $PATHSAVE/"${FILE}" -loglevel error
}

list_song() {
	rm -f *.m3u
	ls -1 | grep $EXT | sed -e 's/.flac//g' > plf
	ls -1 | grep $M3EXT | sed -e 's/.mp3//g' > pl3
	ls -1 | grep $M4EXT | sed -e 's/.m4a//g' > pl4
	ls -1 | grep $OPUSEXT | sed -e 's/.opus//g' > plop
}

bitrate_flac() {
	echo "`ffprobe -i $PATHSAVE/"${FILE}" -v quiet -print_format json -show_format -hide_banner`" > $ID
	BITRATE=`grep bit_rate $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
	echo "Average bitrate of output file is $(($BITRATE/1024)) kBit/s"
}


echo "Please choose the directory to save your file(s):"
echo "1) Desktop" && echo "2) Music" && echo
read number
echo
echo "Please choose extension to save your file(s):"
echo "1) FLAC" && echo "2) MP3" && echo "3) M4A" && echo "4) OPUS" && echo
read number2
if [ $number2 -eq 3 ]; then
	echo
	echo "Please choose AAC encoder:"
	echo "1) AAC (good quality)" && echo "2) AAC (medium quality)"
	echo "3) LIBFDK_AAC (highest quality without cut frequencies, but needs ffmpeg compiled with libfdk_aac)" && echo
	read number5
	echo
	if [ $number5 -eq 3 ]; then
		LIB4=libfdk_aac
		M4AQ="-vbr 5"
	elif [ $number5 -eq 2 ]; then
		LIB4=aac
		M4AQ="-q:a 1.2"
	else
		LIB4=aac
		M4AQ="-q:a 1.5"
	fi
fi
if [ $number2 -eq 1 ]; then
	echo
	echo "Please choose volume output of your trimmed file(s):"
	echo "1) RMS Normalization to 0 dB" && echo "2) ReplayGain as single track" && echo "3) ReplayGain as album" && echo
	read number3
else
	number3=0
fi

if [ $number -eq 1 ]; then
	mkdir -p $PATH1/$OR $PATH1/$TR $PATH1/$CO
	PATHLOAD=$PATH1/$OR
	PATHSAVE=$PATH1/$TR
	PATHIMG=$PATH1/$CO
else
	if [ $number -eq 2 ]; then
		mkdir -p $PATH2/$OR $PATH2/$TR $PATH2/$CO
		PATHLOAD=$PATH2/$OR
		PATHSAVE=$PATH2/$TR
		PATHIMG=$PATH2/$CO
	fi
fi

echo && echo "Do you want to create playlist.m3u?"
echo "1) No" && echo "2) Yes" && echo
read number4

echo && echo "Please put your $EXT file(s) in $PATHLOAD"
read -rsn1 -p "After press any key to continue"
echo


if [[ `ls -1 $PATHLOAD | grep $EXT | wc -l` = 0 ]]; then
	tput clear
	echo "Not found files with" $EXT "extension in" $PATHLOAD
	for i in {7..1}; do
		tput cup 2 $l
		echo "Restarting script in $i seconds..." && echo
		sleep 1
	done
	echo
	exec ./$FT
fi

cd $PATHLOAD

echo && echo "Found" `ls -1 | grep $EXT | wc -l` "file(s) with" $EXT "extension in" $PATHLOAD && echo && echo && sleep 1
n=0
for FILE in *${EXT}; do
	let n=n+1
	echo "Processing file" $n "of" `ls -1 | grep $EXT | wc -l`...
	echo "`ffprobe -i "${FILE}" -v quiet -print_format json -show_format -hide_banner`" > $ID
	sed -i -e 's/\\\"//g' -e 's/ \/ / /g' -e 's/\///g' -e "s/''//g" $ID
	ARTIST=`grep ARTIST $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
	TITLE=`grep TITLE $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
	ALBUM=`grep ALBUM $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
	YEAR=`grep DATE $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
	DURATION=`grep duration $ID | awk -F': "' '{print $2}' | cut -d'.' -f1`
	DBLEVEL=`ffmpeg -i "${FILE}" -af "volumedetect" -f null /dev/null 2>&1 | grep max_volume | awk -F': ' '{print $2}' | cut -d' ' -f1`
	COMPRESULT=`echo ${DBLEVEL}'<'0 | bc -l`
	DBLEVEL=`echo "-(${DBLEVEL})" | bc -l`

	metaflac --export-picture-to="${PATHIMG}"/"${IMG}" "${FILE}"
	IMGEXT=`file "${PATHIMG}"/"${IMG}" | awk -F': ' '{print $2}' | cut -d' ' -f1 | sed -e 's/\(.*\)/\L\1/'`
	mv "${PATHIMG}"/"${IMG}" "${PATHIMG}"/"${ARTIST} - ${ALBUM} ($YEAR).${IMGEXT}"

	echo "ARTIST:" $ARTIST
	echo "ALBUM:" $ALBUM
	echo "SONG TITLE:" $TITLE
	echo "FILE NAME:" "${ARTIST} - ${TITLE}${EXT}"
	echo "DURATION:" `printf '%dm:%ds\n' $(($DURATION%3600/60)) $(($DURATION%60))`
	echo "YEAR:" $YEAR
	echo "SONG LEVEL: -$DBLEVEL dB"

	if [ $number2 -eq 1 ]; then
		if [ $number3 -eq 2 ]; then
			ffmpeg_flac
			bitrate_flac
			mv -f $PATHSAVE/"${FILE}" $PATHSAVE/"${ARTIST} - ${TITLE}${EXT}"
			echo "Scanning for ReplayGain as track..."
			metaflac --add-replay-gain $PATHSAVE/"${ARTIST} - ${TITLE}${EXT}"
		elif [ $number3 -eq 1 ]; then
			ffmpeg_flac_norm
			bitrate_flac
			mv -f $PATHSAVE/"${FILE}" $PATHSAVE/"${ARTIST} - ${TITLE}${EXT}"
		elif [ $number3 -eq 3 ]; then
			ffmpeg_flac
			bitrate_flac
			mv -f $PATHSAVE/"${FILE}" $PATHSAVE/"${ARTIST} - ${TITLE}${EXT}"
		fi
	else
		if [ $number2 -eq 2 ]; then
			DBLEVEL=`echo "$DBLEVEL -0.63" | bc`
			echo "To avoid possible clipping, RMS Normalization will be -0.63 dB (adds +"$DBLEVEL" dB)"
			echo && echo "Encoding to MP3 with VBR "$MP3VBR": it will take time..."
			ffmpeg_mp3
			echo "`ffprobe -i $PATHSAVE/"${FILE}"$M3EXT -v quiet -print_format json -show_format -hide_banner`" > $ID
			BITRATE=`grep bit_rate $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
			echo "Average bitrate of output file is $(($BITRATE/1024)) kBit/s"
			mv -f $PATHSAVE/"${FILE}"$M3EXT $PATHSAVE/"${ARTIST} - ${TITLE}"$M3EXT
		elif [ $number2 -eq 3 ]; then
			if [ $number5 -eq 3 ]; then
				DBLEVEL=`echo "$DBLEVEL -0.35" | bc`
				echo "To avoid possible clipping, RMS Normalization will be -0.35 dB (adds +"$DBLEVEL" dB)"
			else
				DBLEVEL=`echo "$DBLEVEL -0.57" | bc`
				echo "To avoid possible clipping, RMS Normalization will be -0.57 dB (adds +"$DBLEVEL" dB)"
			fi
			echo && echo "Encoding to M4A with library "$LIB4" and "$M4AQ": it will take time..."
			ffmpeg_m4a
			echo "`ffprobe -i $PATHSAVE/"${FILE}"$M4EXT -v quiet -print_format json -show_format -hide_banner`" > $ID
			BITRATE=`grep bit_rate $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
			echo "Average bitrate of output file is $(($BITRATE/1024)) kBit/s"
			mv -f $PATHSAVE/"${FILE}"$M4EXT $PATHSAVE/"${ARTIST} - ${TITLE}"$M4EXT
		elif [ $number2 -eq 4 ]; then
			DBLEVEL=`echo "$DBLEVEL -0.68" | bc`
			echo "To avoid possible clipping, RMS Normalization will be -0.68 dB (adds +"$DBLEVEL" dB)"
			ffmpeg_opus
			echo && echo "Encoding to OPUS: it will take time..."
			opusenc $PATHSAVE/"${FILE}" $PATHSAVE/"${FILE}"$OPUSEXT --quiet
			rm $PATHSAVE/"${FILE}"
			echo "`ffprobe -i $PATHSAVE/"${FILE}"$OPUSEXT -v quiet -print_format json -show_format -hide_banner`" > $ID
			BITRATE=`grep bit_rate $ID | awk -F': "' '{print $2}' | cut -d'"' -f1`
			echo "Average bitrate of output file is $(($BITRATE/1024)) kBit/s"
			mv -f $PATHSAVE/"${FILE}"$OPUSEXT $PATHSAVE/"${ARTIST} - ${TITLE}"$OPUSEXT
		fi
	fi
	echo "*********** DONE! ***********"
	echo
done
if [ $number3 -eq 3 ]; then
	echo && echo "Scanning for ReplayGain as album..."
	metaflac --add-replay-gain $PATHSAVE/*$EXT
fi
echo && echo "***** All songs have been trimmed and/or converted! *****" && echo

cd $PATHSAVE
if [[ $number4 -eq 2 ]]; then
	echo "Creating playlist in alphabetical order..." && echo
	list_song
	echo "#EXTM3U" > $PLF
	while read line; do
		echo "#EXTINF:`ffprobe "${line}${EXT}" -v quiet -print_format json -show_format -hide_banner | \
			grep duration | awk -F'\": \"' '{print $2}' | cut -d'.' -f1`,${line}" >> $PLF
		echo "${line}${EXT}" >> $PLF
	done < plf
	echo "#EXTM3U" > $PL3
	while read line; do
		echo "#EXTINF:`ffprobe "${line}${M3EXT}" -v quiet -print_format json -show_format -hide_banner | \
			grep duration | awk -F'\": \"' '{print $2}' | cut -d'.' -f1`,${line}" >> $PL3
		echo "${line}${M3EXT}" >> $PL3
	done < pl3
	echo "#EXTM3U" > $PL4
	while read line; do
		echo "#EXTINF:`ffprobe "${line}${M4EXT}" -v quiet -print_format json -show_format -hide_banner | \
			grep duration | awk -F'\": \"' '{print $2}' | cut -d'.' -f1`,${line}" >> $PL4
		echo "${line}${M4EXT}" >> $PL4
	done < pl4
	echo "#EXTM3U" > $PLOP
	while read line; do
		echo "#EXTINF:`ffprobe "${line}${OPUSEXT}" -v quiet -print_format json -show_format -hide_banner | \
			grep duration | awk -F'\": \"' '{print $2}' | cut -d'.' -f1`,${line}" >> $PLOP
		echo "${line}${OPUSEXT}" >> $PLOP
	done < plop

	if [[ -f $PLF && `cat $PLF | wc -c` = 8 ]]; then
		rm $PLF; fi
	if [[ -f $PL3 && `cat $PL3 | wc -c` = 8 ]]; then
		rm $PL3; fi
	if [[ -f $PL4 && `cat $PL4 | wc -c` = 8 ]]; then
		rm $PL4; fi
	if [[ -f $PLOP && `cat $PLOP | wc -c` = 8 ]]; then
		rm $PLOP; fi
fi

echo "*********** ALL DONE! ***********"
echo

rm -rf plf pl3 pl4 plop
rm -f $PATHLOAD/$ID

exit 0
